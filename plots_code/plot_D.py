import os
if os.path.basename(os.getcwd()) != "plots_code":
    os.chdir('plots_code')

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

n = 128
p = 256
m = 64
s = 10
nn = np.array([66, 91, 116, 141, 166, 191, 216, 241, 266, 291, 316, 341, 366, 391, 416, 441, 466, 491, 516, 541, 566, 591, 616, 641, 666, 691, 716, 741, 766, 791, 816, 841, 866, 891, 916, 941, 966, 991, 1016, 1041, 1066, 1091, 1116, 1141, 1166, 1191, 1216, 1241, 1266, 1291])
pp = np.array([128, 153, 178, 203, 228, 253, 278, 303, 328, 353, 378, 403, 428, 453, 478, 503, 528, 553, 578, 603, 628, 653, 678, 703, 728, 753, 778, 803, 828, 853, 878, 903, 928, 953, 978])
mm = np.array([1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 52, 55, 58, 61, 64, 67, 70, 73, 76, 79, 82, 85, 88, 91, 94, 97, 100, 103, 106, 109, 112, 115, 118, 121, 124])
ss = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])
res_n = np.array([15.937947236567451, 0.7986134917351357, 0.6493390340258751, 0.649120928208342, 0.6807090238550931, 0.7248477539655745, 0.775572767322852, 0.8259492353994081, 0.8789794331400537, 0.9355380912467423, 0.9932518827126652, 1.0517047980378755, 1.1166979362431262, 1.1725602092533058, 1.2317760444720707, 1.2937950140247, 1.3499580452633841, 1.4194852605634003, 1.4773279762927545, 1.5370348822623103, 1.5974129959035406, 1.6617211836512868, 1.7205209797363963, 1.778941742920108, 1.845061736467433, 1.9100688189946657, 1.9712242001847076, 2.0277837291996956, 2.092655632881973, 2.154518597538714, 2.2133404996080452, 2.2832419304170544, 2.3410238672342554, 2.399848202365059, 2.4649838444876697, 2.5196161584143897, 2.5873051038336934, 2.6466025600333016, 2.7144902808943567, 2.7759788685010487, 2.8384644865500817, 2.8956076487936437, 2.9652716808282324, 3.0241838765937126, 3.084715245609544, 3.1494090920730646, 3.2112954815994232, 3.27671804679588, 3.3367386221873288, 3.3962242521953643])
res_p = np.array([1.2829944533609783, 0.6505014430964552, 0.6474788019034993, 0.6511043667500718, 0.6463324293442541, 0.6509981793526429, 0.32735565467645045, 0.3261369730000491, 0.3260640807673486, 0.3251959778579759, 0.3241853975280181, 0.32328065194868805, 0.3213628168019029, 0.32627268236040174, 0.3281084999631376, 0.3250632813940448, 0.16210529474227878, 0.1622762204517954, 0.1613961960653435, 0.16326060425662642, 0.16201908594482647, 0.16256363884950384, 0.16265443382685427, 0.16266608236490632, 0.16294375860212115, 0.162403733486021, 0.16173798310063342, 0.1625866305305871, 0.16200532399624198, 0.16237847536920463, 0.16255089753066396, 0.16340318152463543, 0.16173372724666912, 0.16364593727182025, 0.163228493490928])       
res_m = np.array([0.005157754570168095, 0.021097286188695663, 0.03755276962062599, 0.054913301352440116, 0.07275735400021148, 0.09119224335381947, 0.1134284846840167, 0.13318643763586951, 0.15638794589552704, 0.1806581948935889, 0.20766444894189742, 0.2347514748925925, 0.26266836156083195, 0.2961925046925941, 0.32977128257941213, 0.3601811136853291, 0.4030875269375625, 0.4419396474307388, 0.4917025783939058, 0.5386227902440489, 0.5923612678603032, 0.6502817186579113, 0.716901840083376, 0.7860999527642905, 0.8712943865531587, 0.9396381560344699, 1.0487718412889002, 1.1457422431621564, 1.3103517768525756, 1.4211651944759078, 1.6405580235604524, 1.8326665112192588, 2.0773276539987626, 2.3705692243033787, 2.7558574049514544, 3.2406417146905184, 3.8570033085029016, 4.626278050561898, 5.926089391297795, 8.33540235852502, 12.870270837050482, 23.949236815545575])
res_s = np.array([68.57669132431086, 16.501377541069058, 7.301740159904576, 4.060280490517242, 2.5781968926033647, 1.8211099010468759, 1.3279841210335013, 1.027172874951756, 0.8030270409390561, 0.6492197272686151, 0.5395844583189634, 0.44739897681625, 0.3887171300785799, 0.33464869585706436, 0.2895879313028791, 0.25284216766916284, 0.2252239724041219, 0.2013726632380449, 0.18017549110716294, 0.16209505954997777])

nnn = np.linspace(np.min(nn), np.max(nn), 1000)
ppp = np.linspace(np.min(pp), np.max(pp), 1000)
mmm = np.linspace(np.min(mm), np.max(mm), 1000)
sss = np.linspace(np.min(ss), np.max(ss), 1000)

f = lambda n, p, m, s: (m*n**2)/((n-m-1)*(s**2)*(np.power(2, np.ceil(np.log2(p)))))

file_names = ["D_plot_n", "D_plot_p", "D_plot_m", "D_plot_s"]

colors = ["black", "red"]
labels = ["Sample mean", "Candidate formula"]

# n

plt.plot(nnn, f(nnn, p, m, s), "-", linewidth=1.5, c=colors[1], label=labels[1])
plt.plot(nn, res_n, linestyle="None", marker = 'o', markerfacecolor="None", markersize=5, c=colors[0], label=labels[0])

plt.ylabel("Mean")
plt.xlabel("$n$")
handles, labels = plt.gca().get_legend_handles_labels()
plt.gca().legend(reversed(handles), reversed(labels))
plt.yscale("log")

save_path = "../plots/"
plt.savefig(save_path + file_names[0] + ".pdf", transparent=True, bbox_inches="tight")
plt.close('all')

# p

plt.plot(ppp, f(n, ppp, m, s), "-", linewidth=1.5, c=colors[1], label=labels[1])
plt.plot(pp, res_p, linestyle="None", marker = 'o', markerfacecolor="None", markersize=5, c=colors[0], label=labels[0])

plt.ylabel("Mean")
plt.xlabel("$p$")
handles, labels = plt.gca().get_legend_handles_labels()
plt.gca().legend(reversed(handles), labels)
plt.yscale("log")

save_path = "../plots/"
plt.savefig(save_path + file_names[1] + ".pdf", transparent=True, bbox_inches="tight")
plt.close('all')

# m

plt.plot(mmm, f(n, p, mmm, s), "-", linewidth=1.5, c=colors[1], label=labels[1])
plt.plot(mm, res_m, linestyle="None", marker = 'o', markerfacecolor="None", markersize=5, c=colors[0], label=labels[0])

plt.ylabel("Mean")
plt.xlabel("$m$")
handles, labels = plt.gca().get_legend_handles_labels()
plt.gca().legend(reversed(handles), reversed(labels))
plt.yscale("log")

save_path = "../plots/"
plt.savefig(save_path + file_names[2] + ".pdf", transparent=True, bbox_inches="tight")
plt.close('all')

# s

plt.plot(sss, f(n, p, m, sss), "-", linewidth=1.5, c=colors[1], label=labels[1])
plt.plot(ss, res_s, linestyle="None", marker = 'o', markerfacecolor="None", markersize=5, c=colors[0], label=labels[0])

plt.ylabel("Mean")
plt.xlabel("$s$")
handles, labels = plt.gca().get_legend_handles_labels()
plt.gca().legend(reversed(handles), labels)
plt.yscale("log")

save_path = "../plots/"
plt.savefig(save_path + file_names[3] + ".pdf", transparent=True, bbox_inches="tight")
plt.close('all')